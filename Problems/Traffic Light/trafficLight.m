function varargout = trafficLight(varargin)
state = [1, 0, 0];

switch nargin
    case 0
        pos = [0, 0];
        size = 1;
        delay = 1;
    case 1
        pos = varargin{1};
        size = 1;
        delay = 1;
    case 2
        pos = varargin{1};
        size = varargin{2};
        delay = 1;
    otherwise
        pos = varargin{1};
        size = varargin{2};
        delay = varargin{3};
end

g = hggroup();

rectangle(...
    'Position', [pos, size, 3*size],...
    'FaceColor', [0, 0, 0],...
    'EdgeColor', [1, 1, 1],...
    'Curvature', 0.08*[3, 1],...
    'HitTest', 'off',...
    'Parent', g)

% red light
rectangle(...
    'Position', [pos+size.*[0.1, 2.1], 0.8*size, 0.8*size],...
    'Curvature', [1, 1],...
    'FaceColor', state(1)*[1, 0, 0],...
    'HitTest', 'off',...
    'Parent', g)

% yellow light
rectangle(...
    'Position', [pos+size.*[0.1, 1.1], 0.8*size, 0.8*size],...
    'Curvature', [1, 1],...
    'FaceColor', state(2)*[1, 0.6, 0],...
    'HitTest', 'off',...
    'Parent', g)

% green light
rectangle(...
    'Position', [pos+size*0.1, 0.8*size, 0.8*size],...
    'Curvature', [1, 1],...
    'FaceColor', state(3)*[0, 0.6, 0],...
    'HitTest', 'off',...
    'Parent', g)

if nargout == 1
    varargout{1} = g;
end

t = timer(...
    'TimerFcn', {@(~, ~, light) nextState(light), g},...
    'StartFcn', {@(~, ~, light) nextState(light), g},...
    'StartDelay', delay);

set(g,...
    'UserData', state,...
    'ButtonDownFcn', {@changeState, t});

end










